version: "3"

services:
  postgrest:
    environment:
      PGRST_OPENAPI_SERVER_PROXY_URI: https://${HOST}/api
    labels:
      traefik.enable: "true"
      traefik.http.routers.postgrest.entrypoints: websecure
      traefik.http.routers.postgrest.rule: Host(`${HOST}`) && PathPrefix(`/api`)
      traefik.http.routers.postgrest.tls: "true"
      traefik.http.routers.postgrest.tls.certresolver: dns
      traefik.http.services.postgrest.loadbalancer.server.port: 3000
      traefik.http.middlewares.postgrest-stripprefix.stripprefix.prefixes: /api
      traefik.http.routers.postgrest.middlewares: postgrest-stripprefix

  react-admin:
    build:
      args:
        VITE_APP_BASE_URI: https://${HOST}
        VITE_API_BASE_URI: https://${HOST}/api
    labels:
      traefik.enable: "true"
      traefik.http.routers.react-admin.entrypoints: websecure
      traefik.http.routers.react-admin.rule: Host(`${HOST}`)
      traefik.http.routers.react-admin.tls: "true"
      traefik.http.routers.react-admin.tls.certresolver: dns
      traefik.http.services.react-admin.loadbalancer.server.port: 80

  react-admin-staging:
    build:
      context: ./dtrack/ui
      dockerfile: ../../config/dockerfiles/react-admin/Dockerfile
      args:
        VITE_MSAL_CLIENT_ID: ${TEST_AZURE_CLIENT_ID}
        VITE_MSAL_AUTHORITY: https://login.microsoftonline.com/${TEST_AZURE_TENANT_ID}
        VITE_APP_BASE_URI: https://${TEST_HOST}
        VITE_API_BASE_URI: https://${HOST}/api
        VITE_PALETTE_PRIMARY: ${PALETTE_PRIMARY}
        VITE_PALETTE_SECONDARY: ${PALETTE_SECONDARY}
    labels:
      traefik.enable: "true"
      traefik.http.routers.staging-react-admin.entrypoints: websecure
      traefik.http.routers.staging-react-admin.rule: Host(`${TEST_HOST}`)
      traefik.http.routers.staging-react-admin.tls: "true"
      traefik.http.routers.staging-react-admin.tls.certresolver: dns
      traefik.http.services.staging-react-admin.loadbalancer.server.port: 80
    networks:
      net: {}
    restart: unless-stopped

  swagger:
    environment:
      URLS: '[ { url: "https://${HOST}/api", name: "VRMT" } ]'
      BASE_URL: /swagger
    labels:
      traefik.enable: "true"
      traefik.http.routers.swagger.entrypoints: websecure
      traefik.http.routers.swagger.rule: Host(`${HOST}`) && PathPrefix(`/swagger`)
      traefik.http.routers.swagger.tls: "true"
      traefik.http.routers.swagger.tls.certresolver: dns
      traefik.http.services.swagger.loadbalancer.server.port: 8080

  traefik:
    command:
      - --accessLog=true
      - --api.insecure=false
      - --api.dashboard=true
      - --api.debug=false
      - --certificatesResolvers.dns.acme.dnsChallenge.provider=${ACME_PROVIDER}
      - --certificatesResolvers.dns.acme.email=${CF_API_EMAIL}
      - --certificatesResolvers.dns.acme.storage=/acme/acme.json
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --log.level=ERROR
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=net
    environment:
      CF_API_EMAIL: ${CF_API_EMAIL}
      CF_API_KEY: ${CF_API_KEY}
    image: traefik:2.9
    labels:
      traefik.enable: "true"
      traefik.http.middlewares.traefik-auth.basicauth.users: ${TRAEFIK_BASICAUTH}
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.middlewares: traefik-auth
      traefik.http.routers.traefik.rule: Host(`traefik.${HOST}`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.tls: "true"
      traefik.http.routers.traefik.tls.certresolver: dns
      traefik.http.services.traefik.loadbalancer.server.port: 8080
    networks:
      net: {}
    ports:
      - published: 80
        target: 80
      - published: 443
        target: 443
    restart: unless-stopped
    volumes:
      - ./keys/acme:/acme:rw
      - /var/run/docker.sock:/var/run/docker.sock:rw
